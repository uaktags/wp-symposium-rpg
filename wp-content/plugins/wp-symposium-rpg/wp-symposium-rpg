<?php
/*
   Plugin Name: WP Symposium RPG
   Plugin URI: http://wordpress.org/extend/plugins/wp-symposium-rpg/
   Version: 0.2
   Author: <a href="http://tagsolutions.tk">Tim G.</a>
   Description: RPG Elements added to WPS
   Text Domain: wp-symposium-rpg
   License: GPL3
  */

/*

    This following part of this file is part of WordPress Plugin Template for WordPress.

    WordPress Plugin Template is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    WordPress Plugin Template is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Contact Form to Database Extension.
    If not, see <http://www.gnu.org/licenses/>.
*/
	//////////////////////////////////
	// Run initialization
	/////////////////////////////////

	/*
	 * Don't start on every page, the plugin page is enough.
	 */
	 
	 if(is_admin()){
	    add_action('admin_init', 'RegisterSettings');
		if ( ! empty ( $GLOBALS['pagenow'] ) && 'plugins.php' === $GLOBALS['pagenow'] )
			add_action( 'admin_notices', 'WpSymposiumRPG_check_admin_notices', 0 );

		$wps_options_pages = array(
			'symposium_rpg_options',
			'symposium_options',
			'symposium_profile', 
			'wp-symposium/plus_admin.php',
			'symposium_forum',
			'__wps__mail_menu',
			'__wps__members_menu',
			'wp-symposium/groups_admin.php',
			'wp-symposium/gallery_admin.php',
			'wp-symposium/news_admin.php',
			'wp-symposium/symposium_bar.php',
			'wp-symposium/events_admin.php',
			'wp-symposium/__wps__mobile_.php',
			'wp-symposium/mailinglist_admin.php',
			'wp-symposium/lounge_admin.php');

		if ( ! empty ( $GLOBALS['pagenow'] ) && 'admin.php' === $GLOBALS['pagenow'] && in_array($_GET['page'], $wps_options_pages) )
			add_action('admin_footer', 'WpSymposiumRPG_options_page_hack');
	}

	/**
	 * Test current system for the features the plugin needs.
	 *
	 * @return array Errors or empty array
	 */
	function WpSymposiumRPG_check_plugin_requirements()
	{
		$errors = array ();
		global $wpdb;
		$wpdb->show_errors();
		if ( !defined('WPS_WL') ) {
			$errors[] = "You must install and activate WP-Symposium before activating
				this plugin!";
		}else{
			if (  get_option(WPS_OPTIONS_PREFIX.'_rpg_installed') != 1) {
				if (check_tables() != FALSE){
					update_option(WPS_OPTIONS_PREFIX.'_rpg_installed', "1");
				} else {
					$errors[] = "You had an error occur!<br />";
				}
				
			}
		}
		return $errors;

	}

	/**
	 * Call WpSymposiumRPG_check_plugin_requirements() and deactivate this plugin if there are error.
	 *
	 * @wp-hook admin_notices
	 * @return  void
	 */
	function WpSymposiumRPG_check_admin_notices()
	{
		$errors = WpSymposiumRPG_check_plugin_requirements();
		if ( empty ( $errors ) )
			return;
		
		
		// Suppress "Plugin activated" notice.
		unset( $_GET['activate'] );

		// this plugin's name
		$name = get_file_data( __FILE__, array ( 'Plugin Name' ), 'plugin' );

		printf(
			'<div class="error"><p>%1$s</p>
			<p><i>%2$s</i> has been deactivated.</p></div>',
			join( '</p><p>', $errors ),
			$name[0]
		);
		deactivate_plugins( plugin_basename( __FILE__ ) );
	}

	function WpSymposiumRPG_on_activation()
{
    if ( ! current_user_can( 'activate_plugins' ) )
        return;
    $plugin = isset( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : '';
    check_admin_referer( "activate-plugin_{$plugin}" );

    # Uncomment the following line to see the function in action
    # exit( var_dump( $_GET ) );
	get_current_users_activated();
	check_tables();
	check_wps_for_rpg();
}

	function WpSymposiumRPG_on_deactivation()
	{
		if ( ! current_user_can( 'activate_plugins' ) )
			return;
		$plugin = isset( $_REQUEST['plugin'] ) ? $_REQUEST['plugin'] : '';
		check_admin_referer( "deactivate-plugin_{$plugin}" );
		# Uncomment the following line to see the function in action
		# exit( var_dump( $_GET ) );
		if (file_exists(WPS_PLUGIN_DIR.'/functions.php.bak')){
			copy ( WPS_PLUGIN_DIR.'/functions.php.bak', WPS_PLUGIN_DIR.'/functions.php');
			unlink(WPS_PLUGIN_DIR.'/functions.php.bak');
		}
	}

	function WpSymposiumRPG_on_uninstall()
	{
		if ( ! current_user_can( 'activate_plugins' ) )
			return;
		check_admin_referer( 'bulk-plugins' );

		// Important: Check if the file is the one
		// that was registered during the uninstall hook.
		if ( __FILE__ != WP_UNINSTALL_PLUGIN )
			return;
		# Uncomment the following line to see the function in action
		# exit( var_dump( $_GET ) );
		$sql = "ALTER TABLE  `".$wpdb->prefix."symposium_usermeta` ";
		$sql .= "DROP  `hp, ";
		$sql .= "DROP  `xp`, ";
		$sql .= "DROP  `strength`, ";
		$sql .= "DROP  `defense`, ";
		$sql .= "DROP  `level`";
		if ($wpdb->query( $sql ) != FALSE){
			if ( $wpdb->query ("DROP TABLE `" . $wpdb->prefix. "symposium_attack_log`") != FALSE){
				update_option(WPS_OPTIONS_PREFIX.'_rpg_installed', "0");
			} else { 
				$errors[] = "You had an error occur! Attack Log wasn't DROPPED!<br />";
				$errors[] =  $wpdb->last_error;
			}
		} else {
			$errors[] = "You had an error occur! USERMETA wasn't changed back!<br />";
			$errors[] =  $wpdb->last_error;
		}
	}

		
	function RegisterSettings()
	{
		// Add options to database if they don't already exist
		add_option(WPS_OPTIONS_PREFIX.'_rpg_installed', "", "", "yes");
		add_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_point', "", "", "yes");
		add_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_new_thread', "", "", "yes");
		add_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_new_reply', "", "", "yes");
		add_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_profile_status', "", "", "yes");
		add_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_new_comment_reply', "", "", "yes");
		add_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_like', "", "", "yes");

		// Register settings that this form is allowed to update
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_installed');
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_bonus_point');
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_bonus_new_thread');
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_bonus_new_reply');
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_bonus_profile_status');
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_bonus_new_comment_reply');
		register_setting('rpg_settings', WPS_OPTIONS_PREFIX.'_rpg_bonus_like');
	}
	//////////////////////////////////
	// End initialization
	/////////////////////////////////
	
	//////////////////////////////////
	// Start Options Page
	/////////////////////////////////
	
	/*
	 * Options Page Hack
	 * Adds Link to Admin->WPS->Options
	*/
	function WpSymposiumRPG_options_page_hack (){
		if($_GET['page'] == "symposium_rpg_options")
			$active = "active";
		else
			$active = "inactive";
		
		echo "<script type='text/javascript' src='" . plugins_url('/script.js?value='.$active, __FILE__)."'></script>";
		//echo "<script type='text/javascirpt'>hack_wps_option_menu();</script>";
	}

	/*
	 * Options Page
	 * Actual WPSymposiumRPG Options Page
	*/
	function symposium_rpg_options() {
		global $wpdb, $current_user; 
		include_once('wp-symposium-rpg-admin.php');
	}

	/*
	 * Creates Menu Page
	*/
	function add_rpg_to_admin_menu()
	{
		$hidden = get_option(WPS_OPTIONS_PREFIX.'_long_menu') == "on" ? '_hidden': '';
		add_submenu_page( 'symposium_debug'.$hidden, __('Symposium RPG', WPS_TEXT_DOMAIN), __('Symposium RPG', WPS_TEXT_DOMAIN), 'manage_options', 'symposium_rpg_options', 'symposium_rpg_options' );
	}

	
	//////////////////////////////////
	// End Options Page
	//////////////////////////////////
	
	//////////////////////////////////
	// Actions and Hooks
	//////////////////////////////////
	register_activation_hook(   __FILE__, 'WpSymposiumRPG_on_activation' );
	register_deactivation_hook( __FILE__, 'WpSymposiumRPG_on_deactivation' );
	register_uninstall_hook(    __FILE__, 'WpSymposiumRPG_on_uninstall' );
	
	add_action('user_register', 'WpSymposiumRPG_user_register');
	add_action('__wps__admin_menu_hook', 'add_rpg_to_admin_menu');
	add_action('symposium_bonus_increment_hook', 'symposium_bonus_increment', 10,2);
	
	add_action('symposium_profile_newpost_hook', 'symposium_hook_hack_addStatus');
	function symposium_hook_hack_addStatus(){
		global $current_user;
		symposium_bonus_increment( $current_user->ID, 'profile-status' );
		return true;
	}
	add_action('symposium_profile_like_hook', 'symposium_hook_hack_like');
	function symposium_hook_hack_like(){
		global $current_user;
		symposium_bonus_increment( $current_user->ID, 'like' );
		return true;
	}
	add_action('__wps__forum_newtopic_hook', 'symposium_hook_hack_newthread');
	function symposium_hook_hack_newthread(){
		global $current_user;
		symposium_bonus_increment( $current_user->ID, 'new_thread' );
		echo "new_thread";
		return true;
	}
	add_action('symposium_forum_reply_hook', 'symposium_hook_hack_newreply');
	function symposium_hook_hack_newreply(){
		global $current_user;
		symposium_bonus_increment( $current_user->ID, 'new_reply' );
		return true;
	}
	add_action('symposium_forum_replycomment_hook', 'symposium_hook_hack_newcommentreply');
	function symposium_hook_hack_newcommentreply(){
		global $current_user;
		symposium_bonus_increment( $current_user->ID, 'new_comment_reply' );
		return true;
	}
	//////////////////////////////////
	// End Actions And Hooks
	//////////////////////////////////
	
	//////////////////////////////////
	// RPG Functions
	//////////////////////////////////
	function symposium_bonus_increment($arg1, $arg2){
		global $wpdb, $current_user;
				/* Argument2 holds the name of the action. Possible values:
				'new_thread' : When a new thread is created 
				'new_reply' : When a new reply is created on thread
				'profile-status' : When a new Profile Status is made
				'new_comment_reply' : When a new comment on a Forum Reply is made (?)
				'like' : When a new like is generated
				/
				/
				These values should cordinate with the settings db name
				*/
			if ( get_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_point') == "on"){
				$bonus = 0;
				switch ( $arg2 ){
					case 'new_thread':
						$bonus = get_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_new_thread');
						break;
					case 'new_reply':
						$bonus = get_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_new_reply');
						break;
					case 'profile-status':
						$bonus = get_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_profile_status');
						break;
					case 'new_comment_reply':
						$bonus = get_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_new_comment_reply');
						break;
					case 'like':
						$bonus = get_option(WPS_OPTIONS_PREFIX.'_rpg_bonus_like');
						break;
				}
				//$sql = "SELECT name, value FROM ".$wpdb->prefix."rpg_settings WHERE name = %s";
				//$new_topic_bonus = $wpdb->get_row($wpdb->prepare($sql, $arg2));
				$sql = "SELECT xp, hp, level FROM ".$wpdb->base_prefix."symposium_usermeta WHERE uid = %d";
				$wpsrpg = $wpdb->get_row($wpdb->prepare($sql, $arg1));
				$newhp = $wpsrpg->xp + $bonus;
				$sql = "UPDATE ".$wpdb->prefix."symposium_usermeta SET xp=%d WHERE uid = %d";
				$wpdb->query( $wpdb->prepare( $sql, $newhp, $arg1));
				//exit;
			}
	}
	
	function __WPS__RPG__Get_Forum_Stats($uid){
		global $wpdb, $current_user; 
		if ( isset ( $uid ) ) {
			$sql = "SELECT xp, hp, level FROM ".$wpdb->base_prefix."symposium_usermeta WHERE uid = %d";
			if ( $wpsrpg = $wpdb->get_row($wpdb->prepare($sql, $uid)) != null){
				$wpsrpg = $wpdb->get_row($wpdb->prepare($sql, $uid));
				$html = "<div name='WPS-RPG'>";
				$html .= "HP: " . $wpsrpg->hp . "<br />";
				$html .= "XP: " . $wpsrpg->xp . "<br />";
				$html .= "Level: " . $wpsrpg->level . "<br />";
				if ($uid != $current_user->ID && WpSymposiumRPG_is_playing($current_user->ID)){
					$html .= "<div style='background-color: lightgreen'; id='result'>";
					$html .= "</div>";
					$html .= "<form id='attack' action='#' method='post'>";
					$html .= "<input type='hidden' name='action' value='attack' />";
					$html .= "<input type='hidden' name='enemy-id' value='".$uid."' />";
					$html .= "<input type='hidden' name='attacker-id' value='".$current_user->ID."' />";
					$html .= "<input type='submit' name='Submit' class='button-primary' value='".__('Attack', WPS_TEXT_DOMAIN)."'	/>";
					$html .= "</form>";
				}
				$html .= "</div>";
			} else {
				$html = "<div name='WPS-RPG'>";
				$html .= "Not Playing RPG";
				$html .= "</div>";
			}
			return $html;
		}
	}
	function WpSymposiumRPG_is_playing($uid){
		global $wpdb, $current_user; 
		$sql = "SELECT xp, hp, level FROM ".$wpdb->base_prefix."symposium_usermeta WHERE uid = %d";
		if ( $wpsrpg = $wpdb->get_row($wpdb->prepare($sql, $uid)) != null){
		 return true;
		 exit;
		 }
		 return false;
	}
	if( ! is_admin() ){
		add_action('wp_footer', '__WPS__RPG__js_for_attacks');
		if(isset($_POST['action']) && $_POST['action'] == 'attack'){
			WpSymposiumRPG_Attack($_POST['attacker-id'], $_POST['enemy-id']);
		}
		
	}
	
	function __WPS__RPG__js_for_attacks(){
		echo '<script type="text/javascript">';
		echo 'jQuery(document).ready(function() {';
		echo "jQuery('#result').hide();";
		echo "jQuery('form#attack').submit(function() {";
		echo " event.preventDefault();";
		echo " jQuery.ajax({";
		echo " data: jQuery(this).serialize(),";
		echo " type: jQuery(this).attr('method'),";
		echo " url: jQuery(this).attr('action'),";
		echo " success: function(response) { ";
		echo " jQuery('#result').show();";
		echo " jQuery('#result').html(response);}";
		echo "});";
		echo "});});";
		echo "</script>";
	
	}
	function get_user_by_id($id){
		global $wpdb;
		$sql = "Select id, user_login from ".$wpdb->base_prefix."users where id = %d";
		if ( $wpdb->get_row($wpdb->prepare($sql, $id)) != null ) {
			return $wpdb->get_row($wpdb->prepare($sql, $id));
		}
		return false;
	}
	function WpSymposiumRPG_Attack($attacker, $defender){
		global $wpdb;
		$attack = array();
		$defend = array();
		$attack['sql'] = "SELECT xp, hp, level, strength, defense FROM ".$wpdb->base_prefix."symposium_usermeta WHERE uid = %d";
		if ( $attack['result'] = $wpdb->get_row($wpdb->prepare($attack['sql'], $attacker)) != null){
				$attack['result'] = $wpdb->get_row($wpdb->prepare($attack['sql'], $attacker));
		}
		$defend['sql'] = "SELECT xp, hp, level, strength, defense FROM ".$wpdb->base_prefix."symposium_usermeta WHERE uid = %d";
		
		if ( $defend['result'] = $wpdb->get_row($wpdb->prepare($defend['sql'], $defender)) != null){
				$defend['result'] = $wpdb->get_row($wpdb->prepare($defend['sql'], $defender));
		}		
		$attack['score'] = calculate_scores($attack['result']->xp, $attack['result']->hp, $attack['result']->level, $attacker);
		$defend['score'] = calculate_scores($defend['result']->xp, $defend['result']->hp, $defend['result']->level, $defender);
		//echo $attack['score'] . " : " . $defend['score']; die;
		if ( $attack['score'] >= $defend['score'] ){ //attacker wins
			$defend['min'] = max(0, ($defend['result']->strength + $defend['result']->defense) - 3);
			$defend['max'] = $defend['result']->strength + $defend['result']->defense + 2;
			$defend['damage'] = rand($defend['min'], $defend['max']);
			$attack['min'] = max(0, ($attack['result']->strength + $attack['result']->defense) - 3);
			$attack['max'] = $attack['result']->strength + $attack['result']->defense + 2;
			$attack['damage'] = rand($attack['min'], $attack['max']);
			$attack['xp'] = $attack['result']->level * rand(4, 6);
			return '<p>'. get_user_by_id($attacker)->user_login . ' Won!</p>';
			update_results_battle($attack['xp'], $attacker, $attack['damage'], $defender, $defend['damage'], $attacker, $defender);
		} else { //attacker loses
			$attack['min'] = max(0, ($attack['result']->strength + $attack['result']->defense) - 3);
			$attack['max'] = $attack['result']->strength + $attack['result']->defense + 2;
			$attack['damage'] = rand($attack['min'], $attack['max']);
			$defend['min'] = max(0, ($defend['result']->strength + $defend['result']->defense) - 3);
			$defend['max'] = $defend['result']->strength + $defend['result']->defense + 2;
			$defend['damage'] = rand($defend['min'], $defend['max']);
			$defend['xp'] = $defend['result']->level * rand( 4, 7);
			return '<p>'. get_user_by_id($defender)->user_login . ' Won!</p>';
			update_results_battle($defend['xp'], $defender, $defend['damage'], $attacker, $attacker['damage'], $attacker, $defender);
		}
	}
	
	function update_results_battle($winxp, $winid, $windam, $loseid, $losedam, $attacker, $defender){
		global $wpdb;
		$wpdb->insert( 
			$wpdb->base_prefix."symposium_attack_log", 
			array( 
				'attacker' => $attacker,
				'defender' => $defender,
				'winner' => $winid				
			), 
			array(  
				'%d',
				'%d',
				'%d'
			) 
		);
		$sql = "UPDATE ".$wpdb->prefix."symposium_usermeta SET xp=xp+%d, hp=hp-%d WHERE uid = %d";
		$wpdb->query( $wpdb->prepare( $sql, $winxp, $windam, $winid));
		$sql = "UPDATE ".$wpdb->prefix."symposium_usermeta SET hp=hp-%d WHERE uid = %d";
		$wpdb->query( $wpdb->prepare( $sql, $losedam, $loseid));
	}
	
	function calculate_scores($xp, $hp, $level, $attacker){
		
		$xp_seed = $xp * rand (1, 5) +3;
		$hp_seed = $hp * rand ( 1, 4) + 5;
		$level_seed = $level * rand ( 1, 3);
		$score = $xp_seed + $hp_seed + $level_seed;
		$score = $score * rand (1, 2);
		return $score;
	}
	
	function WpSymposiumRPG_user_register($user_id){
		global $wpdb;
		$wpdb->insert( 
			$wpdb->base_prefix."symposium_usermeta", 
			array( 
				'uid' => $user_id
			), 
			array(  
				'%d' 
			) 
		);
	}
	
	function get_current_users_activated(){
		global $wpdb;
		$user_ids = $wpdb->get_col(
			"
			SELECT	ID
			FROM $wpdb->users
			"
		);
		foreach ( $user_ids as $id ){
			if ( $wpdb->get_row("SELECT * FROM ". $wpdb->base_prefix . "symposium_usermeta WHERE uid = ". $id ) == null) {
				WpSymposiumRPG_user_register($id);
			}
		}
		return null;
	}
	
	function check_tables(){
		global $wpdb;
		$sql = "CREATE TABLE IF NOT EXISTS " . $wpdb->base_prefix . "symposium_attack_log (
				id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
				attacker int(11) NOT NULL,
				defender int(11) NOT NULL,
				winner int(11) NOT NULL,
				date TIMESTAMP DEFAULT NOW())";
		$wpdb->query($sql);
		if( check_column($wpdb->base_prefix . 'symposium_usermeta','xp') != FALSE){
			if ( check_column($wpdb->base_prefix . 'symposium_usermeta','hp') != FALSE) {
				if ( check_column($wpdb->base_prefix . 'symposium_usermeta','level') != FALSE ){
					if ( check_column($wpdb->base_prefix . 'symposium_usermeta','strength') != FALSE ){
						if ( check_column($wpdb->base_prefix . 'symposium_usermeta','defense') != FALSE) {
						return true;
						}else{
							create_tables('symposium_usermeta', 'defense');
							check_tables();
						}
					} else{
						create_tables('symposium_usermeta', 'strength');
						check_tables();
					}
				} else {
					create_tables('symposium_usermeta', 'level');
					check_tables();
				}
			} else {
				create_tables('symposium_usermeta', 'hp');
				check_tables();
			}
		} else{
			create_tables('symposium_usermeta', 'xp');
			check_tables();
		}
		return false;
	}
	function check_column($table, $col_name){
		global $wpdb;
		if ($table != null){
			$results = $wpdb->get_results("DESC $table");
			if ($results != null){
				foreach ($results as $row ) {
					if ($row->Field == $col_name) {
					return true;
					}
				}
				return false;
			}
			return false;
		}
		return false;
	}
	function create_tables($table, $col){
		global $wpdb;
		switch ( $table ) {
			case 'symposium_usermeta':
				if ( $col == 'xp') {
						$sql = "ALTER TABLE  `".$wpdb->prefix."symposium_usermeta` ";
						$sql .= "ADD  `xp` INT NOT NULL DEFAULT  '0' ";
						if ($wpdb->query( $sql ) != FALSE){
							return true;
						} else {
							$errors[] = "You had an error occur!<br />";
							$errors[] =  $wpdb->last_error;
							return false;
						}
				} elseif ($col == 'hp'){
						$sql = "ALTER TABLE  `".$wpdb->prefix."symposium_usermeta` ";
						$sql .= "ADD  `hp` INT NOT NULL DEFAULT  '100' ";
						if ($wpdb->query( $sql ) != FALSE){
							return true;
						} else {
							$errors[] = "You had an error occur!<br />";
							$errors[] =  $wpdb->last_error;
							return false;
						}
				}elseif($col =='level'){
						$sql = "ALTER TABLE  `".$wpdb->prefix."symposium_usermeta` ";
						$sql .= "ADD  `level` INT NOT NULL DEFAULT  '1'";
						if ($wpdb->query( $sql ) != FALSE){
							return true;
						} else {
							$errors[] = "You had an error occur!<br />";
							$errors[] =  $wpdb->last_error;
							return false;
						}
				}elseif($col == 'defense'){
						$sql = "ALTER TABLE  `".$wpdb->prefix."symposium_usermeta` ";
						$sql .= "ADD  `defense` INT NOT NULL DEFAULT  '5' ";
						if ($wpdb->query( $sql ) != FALSE){
							return true;
						} else {
							$errors[] = "You had an error occur!<br />";
							$errors[] =  $wpdb->last_error;
							return false;
						}
				}elseif($col == 'strength'){
						$sql = "ALTER TABLE  `".$wpdb->prefix."symposium_usermeta` ";
						$sql .= "ADD  `strength` INT NOT NULL DEFAULT  '5' ";
						if ($wpdb->query( $sql ) != FALSE){
							return true;
						} else {
							$errors[] = "You had an error occur!<br />";
							$errors[] =  $wpdb->last_error;
							return false;
						}
				}
			case 'symposium_attack_log':
			
		}	
	}
	function check_wps_for_rpg(){
		global $wpdb;
		$wps_func_url = plugin_dir_path(__FILE__ ). 'wps_files/functions.php' ;
		if (get_option(WPS_OPTIONS_PREFIX.'_rpg_installed') == "0"){
			if (copy ( WPS_PLUGIN_DIR.'/functions.php', WPS_PLUGIN_DIR.'/functions.php.bak') != FALSE){
				unlink(WPS_PLUGIN_DIR.'/functions.php');
				if (copy($wps_func_url, WPS_PLUGIN_DIR.'/functions.php') != FALSE){
					return TRUE;
				}
			}
			return false;
		} else {
			if (!file_exists( WPS_PLUGIN_DIR. '/functions.php.bak')){
				if (copy ( WPS_PLUGIN_DIR.'/functions.php', WPS_PLUGIN_DIR.'/functions.php.bak') != FALSE){
					unlink(WPS_PLUGIN_DIR.'/functions.php');
					if (copy($wps_func_url, WPS_PLUGIN_DIR.'/functions.php') != FALSE){
						return TRUE;
					}else{
						return false;
					}
				}
			}
		}
	}

	//////////////////////////////////
	// End RPG Functions
	//////////////////////////////////
